Step 1: Registering Users/Login:

Once Client sends to Server,
{
	Username: {Username},
	Password: {Password}
}

Server creates user and generates "USERID:str" and declares status as Offline

Server returned status:

200 = Ok, Success
409 = Username Taken

then redirected to Login Page,

Here client again send to Server
{
	Username: {Username},
	Password: {Password}
}

Server side codes:

200 = Ok, Success
400 = Invalid User
401 = Password doesn't Match

Server checks details and lets User to Login

Step 2: Load User Details

An Authentication_Token is generated here for the Users session and status is updated to Online

Format in Which the entire Load Details is Sent
{
	SessionId: {UserIds: {
					UserID: Name
				},
				Messages:{
					MessageID: "data", "TimeStamp", "Sender"
				}}
	SessionId2: UserIds: {
					UserID: Name
				},
				Messages:{
					MessageID: "data", "TimeStamp", "Sender"
				}
	...
}



Step 3: Connecting to Web Socket
	


step 4: Messages Sent:

	Sent from client Side as:
		{
			type: "Messgae"
			SessionID: SessionID,
			Message: {
				"data": data,
				"TimeStamp": TimeStamp,
				"Sender": SenderID
			}
		}
	


	Sent from Server to Clients as:
		{
			SessionID:{
				MessageID: "data", "TimeStamp", "Sender"
			}
		}

DataBase Schema:
Users
{
	UserID: {USERID},
	Username: {Username},
	Password: {Password},
	Status: {Online/Offline}
}

Sessions
{
	SessionID: {SESSIONID},
	Users: [USERID1, USERID2, ...]
}

Messages
{
	MessageID: {MESSAGEID},
	SessionID: {SESSIONID},
	Data: {Data},
	TimeStamp: {Time},
	SenderID: {USERID}
}



Search:_______________ [Invite]

sent from client to server
{
	type: Search,
	Username: Username
}

server will search for user

case 1: User Exists

Sent from server to the searched user:

{
	type: Search,
	UserName: UserName of the Person wanting to talk to you
}

on Recieving the above ^ json from the frontend

a pop should come for the User where he has the option to accept or reject the request

if the user Rejects the request:
	client should send this package in the websocket
	{
		type: "request",
		username: The UserName of the User that had initially sent the request
		Accepted: 0{indicating that he has rejected it}
	}

if the user accepts the request:
	client should send this package in the websocket
	{
		type: "request",
		username: The UserName of the User that had initially sent the request
		Accepted: 1{indicating that he has accepted it}
	}

	when this is recieved the backend will create a session and send back this to the frontend
	this will be sent to both the users that have established a session:
		{
            "type": "Session",
            "SessionID": SessionID,
            "Users": {
                UserID: Username
            }
        }
	Here the UserID and Username will be of the user respectively 

	for example if Winston accepted to establish a session with Nanda

	Winston will recieve:
		{
            "type": "Session",
            "SessionID": 12345,
            "Users": {
                Nanda's UserID: Nanda
            }
        }
	Nanda will recieve:
		{
            "type": "Session",
            "SessionID": 12345,
            "Users": {
                "Winston's UserID": Winston
            }
        }

		{
                "type": "Session",
                "Session": {
                    "SessionID": id,
                    "Username" : sender['Username']
                }

		{ "SessionID": session['SessionID'], "Username": user_details["Username"]}